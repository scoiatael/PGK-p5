
#version 330 core

// Interpolated values from the vertex shaders
in vec3 bar_coords;

// Ouput data
out vec3 color;

uniform int depth;

float dist(vec3 p1, vec3 p2)
{
  return pow(p1.x-p2.x,2) + pow(p1.y-p2.y,2) + pow(p1.z-p2.z,2);
}
void main(){

	// Output color = color specified in the vertex shader, 
	// interpolated between all 3 surrounding vertices
  float dis100 = dist(bar_coords, vec3(1.,0.,0.),
    dis010 = dist(bar_coords, vec3(0.,1.,0.),
    dis001 = dist(bar_coords, vec3(0.,0.,1.);
  color = vec3((sin(dis100) + sin(dis010) + sin(dis001)), 0.2,0.2);
  /*
  if(dis < 0.1)
    color = vec3(0.,0.,0.);
  else
  {
    float x = bar_coords.x;
    float y = bar_coords.y;
    float z = bar_coords.z;
    color = vec3(sin(dis), dis, 0.1);
  }*/
}
